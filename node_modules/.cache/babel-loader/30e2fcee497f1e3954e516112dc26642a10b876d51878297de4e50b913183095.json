{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/CSE416/project/project_cloned/src/components/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport Dropzone from \"react-dropzone\";\nimport toGeoJSON from \"togeojson\";\nimport shp from \"shpjs/dist/shp\";\nimport \"../App.css\";\nimport MapTraffic from \"./MapTraffic\";\n\n// Mapbox access token (public default)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = \"pk.eyJ1IjoiamF5c3VkZnlyIiwiYSI6ImNsbTB3MnJscDA0N3Izcm56dGl4NGFrZzQifQ.T9P37mCX3ll44dNDvOuRGQ\";\n\n//https://docs.mapbox.com/help/tutorials/use-mapbox-gl-js-with-react/\nconst Map = () => {\n  _s();\n  /**  ------------------- useRef / useState   -------------------   **/\n  //initialize map, lng, lat, zoom lvl\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const [lng, setLng] = useState(-73.968285);\n  const [lat, setLat] = useState(40.785091); // NY central park\n  const [zoom, setZoom] = useState(12);\n\n  /** ------------------- useEffect  -------------------  **/\n  useEffect(() => {\n    if (map.current) return; // initialize map only once\n\n    //set map\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: \"mapbox://styles/mapbox/streets-v12\",\n      //latest style URL\n      center: [lng, lat],\n      zoom: zoom\n    });\n    map.current.on(\"move\", () => {\n      setLng(map.current.getCenter().lng.toFixed(4));\n      setLat(map.current.getCenter().lat.toFixed(4));\n      setZoom(map.current.getZoom().toFixed(2));\n    });\n    map.current.addControl(new mapboxgl.NavigationControl(), \"top-right\");\n  }, [lat, lng, zoom]);\n\n  /** ------------------- functions for processing kml file format  ------------------- **/\n  const read = file => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = event => resolve(event.target.result);\n      reader.onerror = reject;\n      reader.readAsText(file);\n    });\n  };\n  const readKML = async kmlFiles => {\n    //read kml file and convert into geojson format\n    let gj = {\n      type: \"FeatureCollection\",\n      features: []\n    };\n    for (let file of kmlFiles) {\n      let text = await read(file);\n      let dom = new DOMParser().parseFromString(text, \"application/xml\");\n      let error = dom.querySelector(\"parsererror\");\n      if (error) throw new Error(error.innerText);\n      gj.features.push(...toGeoJSON.kml(dom).features);\n    }\n    return gj;\n  };\n\n  /**  ------------------- helper functions -------------------  **/\n  //check if the file type is valid\n  const validFileType = file => {\n    if (!file.name.endsWith(\".json\") && !file.name.endsWith(\".geojson\") && !file.name.endsWith(\".zip\") && !file.name.endsWith(\".kml\")) {\n      alert(\"Invalid file type. Please drop GeoJSON, Shapefile (.zip), or KML file.\");\n      return false;\n    }\n    return;\n  };\n\n  //file size check for json\n  const parseJsonData = readerResult => {\n    try {\n      const geojsonData = JSON.parse(readerResult);\n      if (JSON.stringify(geojsonData).size > 5 * 1024 * 1024) {\n        alert(\"file size exceeds limit. Use a file less than 5MB.\");\n        return;\n      }\n      return geojsonData;\n    } catch (e) {\n      console.error(\"Error parsing JSON data.\", e);\n      return null;\n    }\n  };\n\n  //handle json & geojson files\n  const handleJsonFile = (file, reader) => {\n    reader.onload = async () => {\n      const geojsonData = parseJsonData(reader.result);\n      if (geojsonData) {\n        updateMapWithData(geojsonData);\n      }\n    };\n    reader.onerror = () => console.error(\"Error reading the JSON file.\");\n    reader.readAsText(file);\n  };\n\n  //handle shapefile (.zip) and kml files\n  const handleShpKml = (file, reader) => {\n    reader.onload = async () => {\n      let geojsonData;\n      const result = reader.result;\n      if (file.name.endsWith(\".zip\")) {\n        //shapefile\n        try {\n          // functionality to handle error from zip files (no shapefile than error msg)\n          geojsonData = await shp(result);\n        } catch (e) {\n          alert(\"Your shapefile (.zip) has to contain both .shp & .dbf files.\");\n          console.error(\"Invalid Shapefile \", e);\n          return;\n        }\n      } else if (file.name.endsWith(\".kml\")) {\n        //kml file\n        geojsonData = await readKML([file]);\n      }\n      if (geojsonData) {\n        //before updat\n        if (JSON.stringify(geojsonData).size > 5 * 1024 * 1024) {\n          alert(\"file size exceeds limit. Use a file less than 5MB.\");\n        }\n        updateMapWithData(geojsonData);\n      } else {\n        console.error(\"Could not parse geojsonData.\");\n      }\n    };\n    reader.onerror = () => console.error(\"Error reading the file.\");\n    reader.readAsArrayBuffer(file);\n  };\n\n  /**  ------------------- functions for updating the map using files (json, geojson, zip, kml) -------------------  **/\n  const handleFileDrop = async files => {\n    const file = files[0];\n    const reader = new FileReader();\n\n    //if it's not a valid file type, just return\n    if (validFileType(file)) return;\n\n    //handle json file (.json or .geojson file format)\n    if (file.name.endsWith(\".json\") || file.name.endsWith(\".geojson\")) {\n      handleJsonFile(file, reader);\n\n      //handle zip or kml file\n    } else if (file.name.endsWith(\".zip\") || file.name.endsWith(\".kml\")) {\n      handleShpKml(file, reader);\n    }\n  };\n\n  //update map\n  const updateMapWithData = geojsonData => {\n    const sourceId = \"uploadedGeoSource\";\n    const layerId = \"uploaded-data-layer\";\n    if (map.current.getSource(sourceId)) {\n      map.current.getSource(sourceId).setData(geojsonData);\n    } else {\n      map.current.addSource(sourceId, {\n        type: \"geojson\",\n        data: geojsonData\n      });\n      map.current.addLayer({\n        id: layerId,\n        type: \"line\",\n        source: sourceId,\n        paint: {\n          \"line-color\": \"#088\",\n          \"line-opacity\": 0.8\n        }\n      });\n    }\n  };\n\n  /**  -----------------------------------------------------------  **/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"dropzone\",\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Dropzone, {\n      className: \"dropzone\",\n      onDrop: handleFileDrop,\n      multiple: false,\n      children: ({\n        getRootProps,\n        getInputProps\n      }) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"dropzone\",\n        ...getRootProps(),\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ...getInputProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this), \"Drop GeoJSON, Shapefile (in .zip format), or KML file here. (Click)\", /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your layer will show up on the Street Map\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex flex-column\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sidebar\",\n          children: [\"Street Map: Longitude: \", lng, \" | Latitude: \", lat, \" | Zoom: \", zoom]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"map\",\n          ref: mapContainer,\n          className: \"map-container\",\n          style: {\n            top: 0,\n            bottom: 0,\n            width: \"400px\",\n            height: \"400px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapTraffic, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"WsF3jLMV+z0zPjM7fFrlsa7Bx4I=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useRef","useEffect","useState","mapboxgl","Dropzone","toGeoJSON","shp","MapTraffic","jsxDEV","_jsxDEV","accessToken","Map","_s","mapContainer","map","lng","setLng","lat","setLat","zoom","setZoom","current","container","style","center","on","getCenter","toFixed","getZoom","addControl","NavigationControl","read","file","Promise","resolve","reject","reader","FileReader","onload","event","target","result","onerror","readAsText","readKML","kmlFiles","gj","type","features","text","dom","DOMParser","parseFromString","error","querySelector","Error","innerText","push","kml","validFileType","name","endsWith","alert","parseJsonData","readerResult","geojsonData","JSON","parse","stringify","size","e","console","handleJsonFile","updateMapWithData","handleShpKml","readAsArrayBuffer","handleFileDrop","files","sourceId","layerId","getSource","setData","addSource","data","addLayer","id","source","paint","className","children","onDrop","multiple","getRootProps","getInputProps","fileName","_jsxFileName","lineNumber","columnNumber","ref","top","bottom","width","height","_c","$RefreshReg$"],"sources":["/Users/mac/Desktop/CSE416/project/project_cloned/src/components/Map.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport Dropzone from \"react-dropzone\";\nimport toGeoJSON from \"togeojson\";\nimport shp from \"shpjs/dist/shp\";\n\nimport \"../App.css\";\n\nimport MapTraffic from \"./MapTraffic\";\n\n// Mapbox access token (public default)\nmapboxgl.accessToken =\n  \"pk.eyJ1IjoiamF5c3VkZnlyIiwiYSI6ImNsbTB3MnJscDA0N3Izcm56dGl4NGFrZzQifQ.T9P37mCX3ll44dNDvOuRGQ\";\n\n//https://docs.mapbox.com/help/tutorials/use-mapbox-gl-js-with-react/\nconst Map = () => {\n  /**  ------------------- useRef / useState   -------------------   **/\n  //initialize map, lng, lat, zoom lvl\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const [lng, setLng] = useState(-73.968285);\n  const [lat, setLat] = useState(40.785091); // NY central park\n  const [zoom, setZoom] = useState(12);\n\n  /** ------------------- useEffect  -------------------  **/\n  useEffect(() => {\n    if (map.current) return; // initialize map only once\n\n    //set map\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: \"mapbox://styles/mapbox/streets-v12\", //latest style URL\n      center: [lng, lat],\n      zoom: zoom,\n    });\n    map.current.on(\"move\", () => {\n      setLng(map.current.getCenter().lng.toFixed(4));\n      setLat(map.current.getCenter().lat.toFixed(4));\n      setZoom(map.current.getZoom().toFixed(2));\n    });\n    map.current.addControl(new mapboxgl.NavigationControl(), \"top-right\");\n  }, [lat, lng, zoom]);\n\n  /** ------------------- functions for processing kml file format  ------------------- **/\n  const read = (file) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (event) => resolve(event.target.result);\n      reader.onerror = reject;\n      reader.readAsText(file);\n    });\n  };\n\n  const readKML = async (kmlFiles) => {\n    //read kml file and convert into geojson format\n    let gj = { type: \"FeatureCollection\", features: [] };\n\n    for (let file of kmlFiles) {\n      let text = await read(file);\n      let dom = new DOMParser().parseFromString(text, \"application/xml\");\n      let error = dom.querySelector(\"parsererror\");\n      if (error) throw new Error(error.innerText);\n      gj.features.push(...toGeoJSON.kml(dom).features);\n    }\n    return gj;\n  };\n\n  /**  ------------------- helper functions -------------------  **/\n  //check if the file type is valid\n  const validFileType = (file) => {\n    if (\n      !file.name.endsWith(\".json\") &&\n      !file.name.endsWith(\".geojson\") &&\n      !file.name.endsWith(\".zip\") &&\n      !file.name.endsWith(\".kml\")\n    ) {\n      alert(\n        \"Invalid file type. Please drop GeoJSON, Shapefile (.zip), or KML file.\"\n      );\n      return false;\n    }\n    return;\n  };\n\n  //file size check for json\n  const parseJsonData = (readerResult) => {\n    try {\n      const geojsonData = JSON.parse(readerResult);\n      if (JSON.stringify(geojsonData).size > 5 * 1024 * 1024) {\n        alert(\"file size exceeds limit. Use a file less than 5MB.\");\n        return;\n      }\n      return geojsonData;\n    } catch (e) {\n      console.error(\"Error parsing JSON data.\", e);\n      return null;\n    }\n  };\n\n  //handle json & geojson files\n  const handleJsonFile = (file, reader) => {\n    reader.onload = async () => {\n      const geojsonData = parseJsonData(reader.result);\n      if (geojsonData) {\n        updateMapWithData(geojsonData);\n      }\n    };\n    reader.onerror = () => console.error(\"Error reading the JSON file.\");\n    reader.readAsText(file);\n  };\n\n  //handle shapefile (.zip) and kml files\n  const handleShpKml = (file, reader) => {\n    reader.onload = async () => {\n      let geojsonData;\n      const result = reader.result;\n\n      if (file.name.endsWith(\".zip\")) {\n        //shapefile\n        try {\n          // functionality to handle error from zip files (no shapefile than error msg)\n          geojsonData = await shp(result);\n        } catch (e) {\n          alert(\"Your shapefile (.zip) has to contain both .shp & .dbf files.\");\n          console.error(\"Invalid Shapefile \", e);\n          return;\n        }\n      } else if (file.name.endsWith(\".kml\")) {\n        //kml file\n        geojsonData = await readKML([file]);\n      }\n\n      if (geojsonData) {\n        //before updat\n        if (JSON.stringify(geojsonData).size > 5 * 1024 * 1024) {\n          alert(\"file size exceeds limit. Use a file less than 5MB.\");\n        }\n        updateMapWithData(geojsonData);\n      } else {\n        console.error(\"Could not parse geojsonData.\");\n      }\n    };\n    reader.onerror = () => console.error(\"Error reading the file.\");\n    reader.readAsArrayBuffer(file);\n  };\n\n  /**  ------------------- functions for updating the map using files (json, geojson, zip, kml) -------------------  **/\n  const handleFileDrop = async (files) => {\n    const file = files[0];\n    const reader = new FileReader();\n\n    //if it's not a valid file type, just return\n    if (validFileType(file)) return;\n\n    //handle json file (.json or .geojson file format)\n    if (file.name.endsWith(\".json\") || file.name.endsWith(\".geojson\")) {\n      handleJsonFile(file, reader);\n\n      //handle zip or kml file\n    } else if (file.name.endsWith(\".zip\") || file.name.endsWith(\".kml\")) {\n      handleShpKml(file, reader);\n    }\n  };\n\n  //update map\n  const updateMapWithData = (geojsonData) => {\n    const sourceId = \"uploadedGeoSource\";\n    const layerId = \"uploaded-data-layer\";\n\n    if (map.current.getSource(sourceId)) {\n      map.current.getSource(sourceId).setData(geojsonData);\n    } else {\n      map.current.addSource(sourceId, {\n        type: \"geojson\",\n        data: geojsonData,\n      });\n\n      map.current.addLayer({\n        id: layerId,\n        type: \"line\",\n        source: sourceId,\n        paint: {\n          \"line-color\": \"#088\",\n          \"line-opacity\": 0.8,\n        },\n      });\n    }\n  };\n\n  /**  -----------------------------------------------------------  **/\n\n  return (\n    <div id=\"dropzone\" className=\"container\">\n      <Dropzone className=\"dropzone\" onDrop={handleFileDrop} multiple={false}>\n        {({ getRootProps, getInputProps }) => (\n          <button className=\"dropzone\" {...getRootProps()}>\n            <input {...getInputProps()} />\n            Drop GeoJSON, Shapefile (in .zip format), or KML file here. (Click)\n            <p>Your layer will show up on the Street Map</p>\n          </button>\n        )}\n      </Dropzone>\n      <div className=\"d-flex\">\n        <div className=\"d-flex flex-column\">\n          <div className=\"sidebar\">\n            Street Map: Longitude: {lng} | Latitude: {lat} | Zoom: {zoom}\n          </div>\n          <div\n            id=\"map\"\n            ref={mapContainer}\n            className=\"map-container\"\n            style={{ top: 0, bottom: 0, width: \"400px\", height: \"400px\" }}\n          />\n        </div>\n        <MapTraffic />\n      </div>\n    </div>\n  );\n};\n\nexport default Map;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}