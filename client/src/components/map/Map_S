import React, { useContext, useState, useEffect, useRef } from "react";
import {
  Box,
  Grid,
  Tab,
  Tabs,
  Paper,
  useMediaQuery,
  useTheme,
  IconButton,
} from "@mui/material";
import Map, {
  NavigationControl,
  GeolocateControl,
  FullscreenControl,
  ScaleControl,
  Source,
  Layer,
} from "react-map-gl";
import mapboxgl from "mapbox-gl";
import { getMapStyle } from "./tab/control/Basic";
import { fromJS } from "immutable";
import MAP_STYLE from "./map-style-basic-v8.json";
import MapboxGeocoder from "@mapbox/mapbox-gl-geocoder";

import "react-map-gl-geocoder/dist/mapbox-gl-geocoder.css";

import { TabPanel, TabContext } from "@mui/lab";

import StylesTab from "./tab/StylesTab";
import JsonTab from "./tab/JSONTab";
import ShareTab from "./tab/ShareTab";
import SaveTab from "./tab/SaveTab";

import MapMobile from "./landing/MapMobile";
import Memo from "./Memo";

import { MapContext } from "../../contexts/MapContext";

const accessToken =
  "pk.eyJ1IjoiamF5c3VkZnlyIiwiYSI6ImNsbTB3MnJscDA0N3Izcm56dGl4NGFrZzQifQ.T9P37mCX3ll44dNDvOuRGQ";

function MapEditing() {
  const {
    mapType,
    geojsonData,
    setGeojsonData,
    mapStyle,
    markers,
    setMapStyle,
    setMarkers,
  } = useContext(MapContext);
  const [tabValue, setTabValue] = useState("styles");
  const [memoOpen, setMemoOpen] = useState(true);

  const mapContainer = useRef(null);
  const map = useRef(null);
  const [lng, setLng] = useState(-73.968285);
  const [lat, setLat] = useState(40.785091);
  const [zoom, setZoom] = useState(3);

  const [viewport, setViewport] = useState({
    latitude: 40.7128,
    longitude: -74.006,
    zoom: 2,
    bearing: 0,
    pitch: 0,
  });

  const satelliteStyle = "mapbox://styles/mapbox/satellite-v9";
  const defaultStyle = mapType || "mapbox://styles/mapbox/streets-v11";

  const theme = useTheme();
  const isDesktop = useMediaQuery(theme.breakpoints.up("md"));
  const mapRef = useRef();

  const updateMapStyle = (newVisibility, newColor) => {
    const newMapStyle = getMapStyle({
      visibility: newVisibility,
      color: newColor,
    });
    setMapStyle(newMapStyle);
  };

  const handleChange = (event, newValue) => {
    setTabValue(newValue);
  };

  useEffect(() => {
    const map = new mapboxgl.Map({
      container: "map",
      // Choose from Mapbox's core styles, or make your own style with Mapbox Studio
      style: "mapbox://styles/mapbox/dark-v11",
      center: [-103.5917, 40.6699],
      zoom: 3,
    });

    map.on("load", () => {
      // Add a new source from our GeoJSON data and
      // set the 'cluster' option to true. GL-JS will
      // add the point_count property to your source data.
      map.addSource("earthquakes", {
        type: "geojson",
        // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes
        // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.
        data: "https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson",
        cluster: true,
        clusterMaxZoom: 14, // Max zoom to cluster points on
        clusterRadius: 50, // Radius of each cluster when clustering points (defaults to 50)
      });

      map.addLayer({
        id: "clusters",
        type: "circle",
        source: "earthquakes",
        filter: ["has", "point_count"],
        paint: {
          // Use step expressions (https://docs.mapbox.com/style-spec/reference/expressions/#step)
          // with three steps to implement three types of circles:
          //   * Blue, 20px circles when point count is less than 100
          //   * Yellow, 30px circles when point count is between 100 and 750
          //   * Pink, 40px circles when point count is greater than or equal to 750
          "circle-color": [
            "step",
            ["get", "point_count"],
            "#51bbd6",
            100,
            "#f1f075",
            750,
            "#f28cb1",
          ],
          "circle-radius": [
            "step",
            ["get", "point_count"],
            20,
            100,
            30,
            750,
            40,
          ],
        },
      });

      map.addLayer({
        id: "cluster-count",
        type: "symbol",
        source: "earthquakes",
        filter: ["has", "point_count"],
        layout: {
          "text-field": ["get", "point_count_abbreviated"],
          "text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"],
          "text-size": 12,
        },
      });

      map.addLayer({
        id: "unclustered-point",
        type: "circle",
        source: "earthquakes",
        filter: ["!", ["has", "point_count"]],
        paint: {
          "circle-color": "#11b4da",
          "circle-radius": 4,
          "circle-stroke-width": 1,
          "circle-stroke-color": "#fff",
        },
      });

      // inspect a cluster on click
      map.on("click", "clusters", (e) => {
        const features = map.queryRenderedFeatures(e.point, {
          layers: ["clusters"],
        });
        const clusterId = features[0].properties.cluster_id;
        map
          .getSource("earthquakes")
          .getClusterExpansionZoom(clusterId, (err, zoom) => {
            if (err) return;

            map.easeTo({
              center: features[0].geometry.coordinates,
              zoom: zoom,
            });
          });
      });

      // When a click event occurs on a feature in
      // the unclustered-point layer, open a popup at
      // the location of the feature, with
      // description HTML from its properties.
      map.on("click", "unclustered-point", (e) => {
        const coordinates = e.features[0].geometry.coordinates.slice();
        const mag = e.features[0].properties.mag;
        const tsunami = e.features[0].properties.tsunami === 1 ? "yes" : "no";

        // Ensure that if the map is zoomed out such that
        // multiple copies of the feature are visible, the
        // popup appears over the copy being pointed to.
        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
          coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
        }

        new mapboxgl.Popup()
          .setLngLat(coordinates)
          .setHTML(`magnitude: ${mag}<br>Was there a tsunami?: ${tsunami}`)
          .addTo(map);
      });

      map.on("mouseenter", "clusters", () => {
        map.getCanvas().style.cursor = "pointer";
      });
      map.on("mouseleave", "clusters", () => {
        map.getCanvas().style.cursor = "";
      });
    });
  });

  const handleGeocoderViewportChange = (newViewport) => {
    const geocoderDefaultOverrides = { transitionDuration: 1000 };

    return setViewport({
      ...newViewport,
      ...geocoderDefaultOverrides,
    });
  };

  const handleOnResult = (event) => {
    setViewport({
      longitude: event.result.center[0],
      latitude: event.result.center[1],
      zoom: 3,
      transitionDuration: 1000,
    });
  };

  return (
    <div>
      {isDesktop && (
        <Box sx={{ flexGrow: 1 }}>
          <Grid container spacing={2}>
            {/* MapBox View */}
            <Grid item sx={{ height: "800px" }} xs={12} md={8}>
              <Map
                {...viewport}
                mapStyle={mapStyle && mapStyle.toJS()}
                styleDiffing
                mapboxAccessToken={accessToken}
                id="map"
              >
                <NavigationControl onViewportChange={setViewport} />
                <FullscreenControl />
                <GeolocateControl />
                <ScaleControl />

                {geojsonData && (
                  <Source type="geojson" data={geojsonData}>
                    <Layer />
                  </Source>
                )}

                {/* Toggle button for satellite view */}
                <button
                  onClick={() =>
                    setViewport({ ...viewport, mapStyle: satelliteStyle })
                  }
                >
                  Satellite View
                </button>
              </Map>
            </Grid>

            {/* Styling Side Bar */}
            <Grid item fullWidth xs={12} md={4}>
              <TabContext value={tabValue}>
                <Paper square>
                  <Tabs
                    variant="fullWidth"
                    value={tabValue}
                    onChange={handleChange}
                    indicatorColor="secondary"
                    textColor="secondary"
                    aria-label="disabled tabs example"
                  >
                    <Tab
                      label="Styles"
                      value="1"
                      sx={{ backgroundColor: "#282c34", color: "#fafafa" }}
                    />
                    <Tab
                      label="JSON"
                      value="2"
                      sx={{ backgroundColor: "#282c34", color: "#fafafa" }}
                    />
                    <Tab
                      label="Share"
                      value="3"
                      sx={{ backgroundColor: "#282c34", color: "#fafafa" }}
                    />
                    <Tab
                      label="Save"
                      value="4"
                      sx={{ backgroundColor: "#282c34", color: "#fafafa" }}
                    />
                  </Tabs>
                </Paper>
                <TabPanel value="styles">
                  <StylesTab
                    onChange={setMapStyle}
                    setGeojsonData={setGeojsonData}
                    setMarkers={setMarkers}
                    markers={markers}
                  />
                </TabPanel>
                <TabPanel value="json">
                  <JsonTab
                    geojsonData={geojsonData}
                    setGeojsonData={setGeojsonData}
                  />
                </TabPanel>
                <TabPanel value="share">
                  <ShareTab />
                </TabPanel>
                <TabPanel value="save">
                  <SaveTab />
                </TabPanel>
              </TabContext>
              <IconButton
                onClick={() => setMemoOpen(!memoOpen)}
                sx={{
                  fontSize: "15px",
                  textStyle: "bold",
                  width: "100%",
                  height: "20px",
                  backgroundColor: "grey",
                  borderRadius: "0",
                }}
              >
                {(memoOpen && "↓") || "↑"}
              </IconButton>
              {memoOpen && <Memo />}
            </Grid>
          </Grid>
        </Box>
      )}

      {!isDesktop && <MapMobile />}
    </div>
  );
}

export default MapEditing;
